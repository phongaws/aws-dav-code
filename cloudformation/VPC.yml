AWSTemplateFormatVersion: 2010-09-09
Description: Create VPC, Subnet, RouteTable, DHCPOptionSet
Parameters:
  KeyName:
    Description: Key Pair for EC2
    Type: 'AWS::EC2::KeyPair::KeyName'

Resources:
# Create VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: stg-vpc-AST-001
      - Key: SystemID
        Value: AST

# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: stg-igw-AST-001
      - Key: SystemID
        Value: AST

# AttachGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# Create Public Subnet 1 for ELB Tier
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: stg-vpc-publicsubnet-AST-001
        - Key: SystemID
          Value: AST

# Create Public Subnet 2 for ELB Tier
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: stg-vpc-publicsubnet-AST-002
        - Key: SystemID
          Value: AST

# Create Private Subnet 1 for EC2 Tier
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: stg-vpc-privatesubnet-AST-001
        - Key: SystemID
          Value: AST

# Create Private Subnet 2 for EC2 Tier
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: stg-vpc-privatesubnet-AST-002
        - Key: SystemID
          Value: AST

# Create Public RouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: stg-routetable-AST-elb-001
      - Key: SystemID
        Value: AST

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

# Create Private RouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: stg-routetable-AST-ec2-001
      - Key: SystemID
        Value: AST

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

# Create DHCPOptionSet
  DHCPOptionSet01:
    Type: 'AWS::EC2::DHCPOptions'
    Properties: 
      DomainName: ec2.internal
      DomainNameServers: 
        - AmazonProvidedDNS
      NtpServers: 
        - 169.254.169.123
      Tags:
      - Key: Name
        Value: stg-dhcp-AST-001
      - Key: SystemID
        Value: AST

  AssociateDHCPOptionSet01:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties: 
      DhcpOptionsId: !Ref DHCPOptionSet01
      VpcId: !Ref VPC

# EC2 and ALB Security Groups
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      GroupName: stg-securitygroup-elb-AST-001
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: stg-securitygroup-elb-AST-001
      - Key: SystemID
        Value: AST
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      GroupName: stg-securitygroup-ec2-AST-001
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: stg-securitygroup-ec2-AST-001
      - Key: SystemID
        Value: AST
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ELBSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        CidrIp: 10.0.0.0/16

# EFS FileSystem
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
      - Key: Name
        Value: stg-efs-AST-001
      - Key: SystemID
        Value: AST

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups: 
      - !Ref EC2SecurityGroup
      SubnetId: !Ref PrivateSubnet1

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups: 
      - !Ref EC2SecurityGroup
      SubnetId: !Ref PrivateSubnet2

#EC2 Instances
  EC2Instance1:
    DependsOn: MountTarget1
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316
      InstanceType: t2.micro
      PrivateIpAddress: 10.0.3.4
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PrivateSubnet1
      KeyName: !Ref KeyName
      Tags:
      - Key: Name
        Value: stg-ec2-AST-001
      - Key: SystemID
        Value: AST
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          # yum update -y
          # yum install -y httpd
          # systemctl start httpd
          # systemctl enable httpd
          # echo "<h1>Hello from Region us-east-1a</h1>" > /var/www/html/index.html
          mkdir efs
          sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ efs

  EC2Instance2:
    DependsOn: MountTarget2
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316
      InstanceType: t2.micro
      PrivateIpAddress: 10.0.4.4
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PrivateSubnet2
      KeyName: !Ref KeyName
      Tags:
      - Key: Name
        Value: stg-ec2-AST-002
      - Key: SystemID
        Value: AST
      UserData:
        Fn::Base64: !Sub |
          # #!/bin/bash
          # yum update -y
          # yum install -y httpd
          # systemctl start httpd
          # systemctl enable httpd
          # echo "<h1>Hello from Region us-east-1b</h1>" > /var/www/html/index.html
          mkdir efs
          sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ efs

  EC2Instance3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref ELBSecurityGroup
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName
      Tags:
      - Key: Name
        Value: stg-ec2-AST-003
      - Key: SystemID
        Value: AST
 
# Target Group, Listener and Application  Load Balancer
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: stg-tagetgroup-AST-001
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref EC2Instance1
        Port: 80
      - Id: !Ref EC2Instance2
        Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: stg-alb-AST-001
      Scheme: internet-facing
      Type: application
      Tags:
      - Key: Name
        Value: stg-alb-AST-001
      - Key: SystemID
        Value: AST
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId

# output
Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"

  StackPubSubnet1:
    Description: The ID of the VPC Subnet
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"

  StackPubSubnet2:
    Description: The ID of the VPC Subnet
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2"

  StackPrivateSubnet1:
    Description: The ID of the VPC Subnet
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"

  StackPrivateSubnet2:
    Description: The ID of the VPC Subnet
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2"

  StackPublicRouteTable:
    Description: The ID of the VPC Route Table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTable"

  StackPrivateRouteTable:
    Description: The ID of the VPC Route Table
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateRouteTable"

  StackDHCPOptionSet01:
    Description: The ID of the DHCPOptionSet
    Value: !Ref DHCPOptionSet01
    Export:
      Name: !Sub "${AWS::StackName}-DHCPOptionSet01"

  StackFileSystem:
    Description: The ID of the FileSystem
    Value: !Ref FileSystem
    Export:
      Name: !Sub "${AWS::StackName}-FileSystem"